// size
@mixin size($width, $height: $width) {
  width: $width;
  height: $height;
}

// Enter/Exit
@mixin slide-in-out {
  &.slide-in {
    transform: translateX(0);
    opacity: 1;
    transition: all 0.7s ease;
  }

  &.slide-out {
    transform: translateX(cell-size('default')*8);
    opacity: 0;
    transition: all 0.7s ease;

    @include media('small') {
      transform: translateX(cell-size('small')*8);
    }
    @include media('medium') {
      transform: translateX(cell-size('medium')*8);
    }
    @include media('large') {
      transform: translateX(cell-size('large')*8);
    }
    @include media('huge') {
      transform: translateX(cell-size('huge')*8);
    }
  }
}

@mixin hide {
  &.hide {
    visibility: hidden;
    opacity: 0;
  }
}
@mixin show {
  &.show {
    visibility: visible;
    opacity: 1;
  }
}

// Media Queries
@mixin media($bp) {
  $bn: #{breakpoint($bp)};
  @media (min-width: $bn) {
    @content;
  }
}

/** 
* Mixin for making cell-sizes responsive when width = height and depends on cell-size.
* @each creates code as below for each size:
* 
* @include media('small') {
*   @include size($cell-small*$mod);
* }
*/
@mixin responsiveCellSize($mod: 1) {
  @include size(cell-size('default')*$mod);

  @each $key, $value in $breakpoints {
    @include media($key) {
      @include size(cell-size($key)*$mod);
    }
  }
}
